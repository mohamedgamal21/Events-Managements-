{"ast":null,"code":"var _jsxFileName = \"E:\\\\mohamed\\\\my_projects\\\\React.js training\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Event.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 12\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: \"couldn't fetch events\"}, {status: 500}));\n    throw json({\n      messgae: \"couldn't fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function Loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\n_c2 = Loader;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventsPage\");\n$RefreshReg$(_c2, \"Loader\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","messgae","status","Loader","_c2","$RefreshReg$"],"sources":["E:/mohamed/my_projects/React.js training/12-adv-starting-project/frontend/src/pages/Event.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n    const { events } = useLoaderData();\r\n\r\n    return <Await resolve={events}></Await>\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        // throw new Response(JSON.stringify({message: \"couldn't fetch events\"}, {status: 500}));\r\n        throw json({ messgae: \"couldn't fetch events\" }, { status: 500 })\r\n    } else {\r\n        return response;\r\n    }\r\n}\r\n\r\nexport function Loader() {\r\n    return defer({\r\n        events: loadEvents(), \r\n    });\r\n}"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAAEC;EAAO,CAAC,GAAGN,aAAa,CAAC,CAAC;EAElC,oBAAOG,OAAA,CAACN,KAAK;IAACU,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAC3C;AAACN,EAAA,CAJQD,UAAU;EAAA,QACIJ,aAAa;AAAA;AAAAY,EAAA,GAD3BR,UAAU;AAMnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA,MAAMjB,IAAI,CAAC;MAAEkB,OAAO,EAAE;IAAwB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACrB,OAAOrB,KAAK,CAAC;IACTQ,MAAM,EAAEO,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;AAACO,GAAA,GAJeD,MAAM;AAAA,IAAAP,EAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}