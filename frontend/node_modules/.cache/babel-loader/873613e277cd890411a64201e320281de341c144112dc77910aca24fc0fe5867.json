{"ast":null,"code":"var _jsxFileName = \"E:\\\\mohamed\\\\my_projects\\\\React.js training\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Event.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function Loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: \"couldn't fetch events\"}, {status: 500}));\n    throw json({\n      messgae: \"couldn't fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\n_c2 = Loader;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventsPage\");\n$RefreshReg$(_c2, \"Loader\");","map":{"version":3,"names":["json","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","Loader","response","fetch","ok","messgae","status","_c2","$RefreshReg$"],"sources":["E:/mohamed/my_projects/React.js training/12-adv-starting-project/frontend/src/pages/Event.js"],"sourcesContent":["import { json, useLoaderData } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n    const data = useLoaderData();\r\n\r\n    const events = data.events;\r\n\r\n    return <EventsList events={events} />\r\n\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function Loader() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        // throw new Response(JSON.stringify({message: \"couldn't fetch events\"}, {status: 500}));\r\n        throw json({messgae: \"couldn't fetch events\"},{status: 500})\r\n    } else {\r\n        return response;\r\n    }\r\n    \r\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAE5B,MAAMO,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBAAOJ,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEzC;AAACN,EAAA,CAPQD,UAAU;EAAA,QACFJ,aAAa;AAAA;AAAAY,EAAA,GADrBR,UAAU;AASnB,eAAeA,UAAU;AAEzB,OAAO,eAAeS,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA,MAAMjB,IAAI,CAAC;MAACkB,OAAO,EAAE;IAAuB,CAAC,EAAC;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EAChE,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AAEJ;AAACK,GAAA,GAVqBN,MAAM;AAAA,IAAAD,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}